"VimConfig
"--------------------------------------------------
set number
set mouse=a
set numberwidth=1
set clipboard=unnamed
syntax enable
set showcmd
set ruler
set cursorline
set encoding=utf-8
set showmatch
set sw=2
set relativenumber
set laststatus=2
set noshowmode
set bg=dark
set hidden
set tabstop=2
set nowrap
set autoindent
set ts=2 sw=2 et
set autoread
"--------------------------------------------------

"Plugins
"--------------------------------------------------
call plug#begin('~/.config/nvim/plugged')
Plug 'morhetz/gruvbox'
Plug 'scrooloose/nerdtree'
Plug 'easymotion/vim-easymotion'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tribela/vim-transparent'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'maximbaz/lightline-ale'
Plug 'itchyny/lightline.vim'
Plug 'tyewang/vimux-jest-test'
Plug 'janko/vim-test'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'jiangmiao/auto-pairs'
Plug 'alvan/vim-closetag'
Plug 'tpope/vim-surround'
Plug 'tasn/vim-tsx'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'moll/vim-node'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'ap/vim-css-color'
Plug 'ryanoasis/vim-devicons'
Plug 'bryanmylee/vim-colorscheme-icons'
Plug 'SirVer/ultisnips'

call plug#end()
"--------------------------------------------------

"PluginsConfig
"--------------------------------------------------
let NERDTreeShowHidden=1
let g:closetag_filenames = '*.html, *.js, *.jsx, *.ts, *.tsx'
let NERDTreeQuitOnOpen=1
let g:indent_guides_enable_on_vim_startup = 1
"--------------------------------------------------

"Theme
"--------------------------------------------------
colorscheme gruvbox
let g:gruvbox_contrast_dark = "hard"
"--------------------------------------------------

"LeaderKeyShortcuts
"--------------------------------------------------
let mapleader=" "
nmap <Leader>s <Plug>(easymotion-s2)
nmap <Leader>nt :NERDTreeFind<CR>
nmap <Leader>nr :NERDTreeToggle<CR>
nmap <Leader>w :w<CR>
nmap <Leader>q :q<CR>
nmap <Leader>Q :q!<CR>
nmap <silent>gd <Plug>(coc-definition)
nmap <silent>gy <Plug>(coc-type-definition)
nmap <silent>gi <Plug>(coc-implementation)
nmap <silent>gr <Plug>(coc-references)
nmap <Leader>h :tabprevious<cr>
nmap <Leader>l :tabnext<cr>
nnoremap <Leader>k :m .-2<CR>==
nnoremap <Leader>j :m .+1<CR>==
nnoremap <Leader>G :G<CR>
nnoremap <Leader>gp :Gpush<CR>
nnoremap <Leader>gl :Gpull<CR>
nnoremap <Leader>t :term<CR>
nnoremap <Leader>te :TestNearest<CR>
nnoremap <Leader>T :TestFile<CR>
nnoremap <Leader>TT :TestSuite<CR>
"--------------------------------------------------
UltiSnips/
  / html.snippets
    snippet html
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>${1:Page Title}</title>
	</head>
	<body>
		${0}
	</body>
</html>
endsnippet

  javascript.snippets
  snippet clg "console.log();"
console.log( $1 );
endsnippet

snippet imp "import a from 'b'"
import ${2:{ $3 }} from '$1';
endsnippet

snippet expall "export * from 'a'"
export * from '$1';
endsnippet

snippet swt "export * from 'a'"
switch ( $1 ) {
	case '$2':
		return;

	case '$3':
		return;

	default:
		return;
}
endsnippet

snippet trc "export * from 'a'"
try {

} catch ( error ) {

}
endsnippet

snippet prfc "Create a React Functional Component for NextPage"

const $1Page = () => {
	return (
		<div>$1Page</div>
	);
}

export default $1Page;
endsnippet

snippet rfc "Create a React Functional Component"

export const $1 = () => {
	return (
		<div>$1</div>
	);
}
endsnippet


snippet nodec "Create a Controller for Nodejs"
// Database
// Services


/**
 * Handler description
 *
 * PATH: /api/...
 * AUTH-REQUIRED: false
 * ADMIN-REQUIRED: false
 *
 * @param { Object } req - The HTTP request object.
 * @param { Object } res - The HTTP response object.
 * @returns { void }
 */
const $1Controller = async ( req, res ) => {
  try {
    res.status( 200 ).json({
      ok: true,
			msg: '$1Controller'
    });
  
  } catch ( error ) {
    console.log( `${ '[CONTROLLER.GET-PRODUCTS]'.bgRed }: ${ error }` );
  }
}

export default $1Controller;
endsnippet

snippet nodes "Create a Service for Nodejs"
// Database
// Models


/**
 * Service Desciption
 *
 * @param {Object} req - Express request object containing query parameters
 * @returns {Object} - An object containing the total count of products and an array of products
 */
const $1Service = async ( req ) => {
  try {
    return {
			message: '$1Service'
    }
  } catch ( error ) {
    console.log( `${ '[SERVICE.GET-PRODUCTS]'.bgRed }: ${ error }` );
  }
}

export default $1Service;
endsnippet

snippet ust "useState"
const [ $1, set$1 ] = useState({});
endsnippet

snippet rctx "react context"
import { createContext } from 'react';

export const $1Context = createContext();
endsnippet

snippet rprov "react provider"
// React
import { useReducer } from 'react';
// Context
import { $1Context, $1Reducer } from './';


const $1_INITIAL_STATE =	{
	property: false
}

export const $1Provider = ({ children }) => {
	const [ state, dispatch ] = useReducer( $1Reducer, $1_INITIAL_STATE );

	return (
		<$1Context.Provider
			value={{
				...state
			}}
		>
			{ children }
		</$1Context.Provider>
	);
};
endsnippet

snippet rred "react reducer"

export const $1Reducer = ( state, action ) => {
	switch ( action.type ) {
		case '[$1] - ':
			return {
				...state,
			}

		default: 
			return state;
	}
};
endsnippet

snippet ctxindex "Context Index"
export * from './$1Context';
export * from './$1Provider';
export * from './$1Reducer';
endsnippet

snippet gssp "getServerSideProps"
export const getServerSideProps = async ( ctx ) => {

  return {
    props: {},
  }
}
endsnippet

snippet gspt "getStatickPaths"
export const getStatickPaths = async ( ctx ) => {
	const { data } = await // Your fetch function here

  return {
		paths: [
			{
				params: {

				}
			}
		],
		fallback: 'blocking'
  }
}
endsnippet

snippet gspr "getStatickProps"
export const getStatickProps = async ( ctx ) => {
	const { data } = await // Your fetch function here

  return {
		props: {

		}
  }
}
endsnippet

snippet napi "Api item for Next.js"
export default function handler( req, res ) {
	res.status( 200 ).json({
		ok: true,
		message: 'Example'
	});
}
endsnippet

  



